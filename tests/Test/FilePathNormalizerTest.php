<?php
/**
 * Contains FilePathNormalizerTest class.
 *
 * PHP version 5.4
 *
 * LICENSE:
 * This file is part of file_path_normalizer which is used to normalize PHP file
 * paths without several of the shortcomings of the built-in functions.
 * Copyright (C) 2014 Michael Cummings
 *
 * This program is free software: you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the
 * Free Software Foundation, version 2 of the License.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program. If not, see
 * <http://www.gnu.org/licenses/>.
 *
 * You should be able to find a copy of this license in the LICENSE file.
 *
 * @copyright 2014 Michael Cummings
 * @license   http://www.gnu.org/licenses/gpl-2.0.html GNU GPLv2
 * @author    Michael Cummings <mgcummings@yahoo.com>
 */
namespace FilePathNormalizer\Test;

use FilePathNormalizer\FilePathNormalizer;
use PHPUnit_Framework_TestCase;

/**
 * @since GIT:$Id$ Generated by PHPUnit_SkeletonGenerator on 2014-11-16 at
 *        06:22:12.
 */
class FilePathNormalizerTest extends PHPUnit_Framework_TestCase
{
    /**
     *
     */
    public function testNormalizeFileIgnoresAbsoluteRequiredForVfsStreamWrapper()
    {
        $file = 'vfs://test/dummy.txt';
        $expected = 'vfs://test/dummy.txt';
        $this->assertEquals($expected, $this->object->normalizeFile($file));
    }
    /**
     *
     */
    public function testNormalizeFileThrowsDomainExceptionForEmptyFileName()
    {
        $mess = 'File name can NOT have non-printable characters or be empty';
        $this->setExpectedException('DomainException', $mess);
        $file = '/test/';
        $this->object->normalizeFile($file);
    }
    /**
     *
     */
    public function testNormalizeFileThrowsDomainExceptionForRelativePathThatGoesAboveRoot()
    {
        $regEx = '/^Can NOT go above root path but was given /';
        $this->setExpectedExceptionRegExp('DomainException', $regEx);
        $file = '/test/../../dummy.txt';
        $this->object->normalizeFile($file);
    }
    /**
     *
     */
    public function testNormalizeFileThrowsDomainExceptionWithRelativePathAndAbsoluteRequired()
    {
        $regEx = '/^Absolute path required but root part missing, was given /';
        $this->setExpectedExceptionRegExp('DomainException', $regEx);
        $file = 'test/dummy.txt';
        $this->object->normalizeFile($file);
    }
    /**
     *
     */
    public function testNormalizeFileThrowsInvalidArgumentExceptionWhenFileIsNotString()
    {
        $regEx = '/^String expected but was given /';
        $this->setExpectedExceptionRegExp('InvalidArgumentException', $regEx);
        $file = [];
        $this->object->normalizeFile($file);
    }
    /**
     *
     */
    public function testNormalizeFileWithUnixTypePaths()
    {
        $file = '/test/dummy.txt';
        $expected = '/test/dummy.txt';
        $this->assertEquals($expected, $this->object->normalizeFile($file));
        $file = '/test/dummy/dummy.txt';
        $expected = '/test/dummy/dummy.txt';
        $this->assertEquals($expected, $this->object->normalizeFile($file));
        $file = 'test/dummy.txt';
        $expected = 'test/dummy.txt';
        $this->assertEquals(
            $expected,
            $this->object->normalizeFile($file, false)
        );
        $file = 'test/dummy/dummy.txt';
        $expected = 'test/dummy/dummy.txt';
        $this->assertEquals(
            $expected,
            $this->object->normalizeFile($file, false)
        );
    }
    /**
     *
     */
    public function testNormalizePathIgnoresAbsoluteRequiredForVfsStreamWrapper()
    {
        $path = 'vfs://test';
        $expected = 'vfs://test/';
        $this->assertEquals($expected, $this->object->normalizePath($path));
    }
    /**
     *
     */
    public function testNormalizePathThrowsDomainExceptionForRelativePathThatGoesAboveRoot()
    {
        $regEx = '/^Can NOT go above root path but was given /';
        $this->setExpectedExceptionRegExp('DomainException', $regEx);
        $path = '/test/../../';
        $this->object->normalizePath($path);
    }
    /**
     *
     */
    public function testNormalizePathThrowsDomainExceptionWhenPathContainsInvalidCharacter()
    {
        $mess = 'Path can NOT have non-printable characters or be empty';
        $this->setExpectedException('DomainException', $mess);
        $path = "\r\n";
        $this->object->normalizePath($path);
    }
    /**
     *
     */
    public function testNormalizePathThrowsDomainExceptionWithRelativePathAndAbsoluteRequired()
    {
        $regEx = '/^Absolute path required but root part missing, was given /';
        $this->setExpectedExceptionRegExp('DomainException', $regEx);
        $path = 'test/dummy';
        $this->object->normalizePath($path);
    }
    /**
     *
     */
    public function testNormalizePathThrowsInvalidArgumentExceptionWhenPathIsNotString()
    {
        $regEx = '/^String expected but was given /';
        $this->setExpectedExceptionRegExp('InvalidArgumentException', $regEx);
        $path = [];
        $this->object->normalizePath($path);
    }
    /**
     *
     */
    public function testNormalizePathWithUnixTypeAbsolutePaths()
    {
        $path = '/test/';
        $this->assertEquals($path, $this->object->normalizePath($path));
        $path = '/test';
        $expected = '/test/';
        $this->assertEquals($expected, $this->object->normalizePath($path));
        $path = '/test/dummy';
        $expected = '/test/dummy/';
        $this->assertEquals($expected, $this->object->normalizePath($path));
        $path = 'test:///test';
        $expected = 'test:///test/';
        $this->assertEquals($expected, $this->object->normalizePath($path));
        $path = 'test:///test/dummy';
        $expected = 'test:///test/dummy/';
        $this->assertEquals($expected, $this->object->normalizePath($path));
        $path = 'test:///test//dummy';
        $expected = 'test:///test/dummy/';
        $this->assertEquals($expected, $this->object->normalizePath($path));
        $path = 'test:///test/./dummy';
        $expected = 'test:///test/dummy/';
        $this->assertEquals($expected, $this->object->normalizePath($path));
        $path = 'test:///test//dummy/../..';
        $expected = 'test:///';
        $this->assertEquals($expected, $this->object->normalizePath($path));
    }
    /**
     *
     */
    public function testNormalizePathWithUnixTypeRelativePaths()
    {
        $path = 'test';
        $expected = 'test/';
        $this->assertEquals(
            $expected,
            $this->object->normalizePath($path, false)
        );
        $path = 'test://test';
        $expected = 'test://test/';
        $this->assertEquals(
            $expected,
            $this->object->normalizePath($path, false)
        );
        $path = 'test://test/dummy/..';
        $expected = 'test://test/';
        $this->assertEquals(
            $expected,
            $this->object->normalizePath($path, false)
        );
        $path = 'test://test//dummy/../..';
        $expected = 'test://';
        $this->assertEquals(
            $expected,
            $this->object->normalizePath($path, false)
        );
        $path = 'test://test/./dummy/../';
        $expected = 'test://test/';
        $this->assertEquals(
            $expected,
            $this->object->normalizePath($path, false)
        );
    }
    /**
     *
     */
    public function testNormalizePathWithWindowsTypeAbsolutePaths()
    {
        $path = 'c:\\test\\';
        $expected = 'c:/test/';
        $this->assertEquals($expected, $this->object->normalizePath($path));
        $path = 'c:\\test';
        $expected = 'c:/test/';
        $this->assertEquals($expected, $this->object->normalizePath($path));
        $path = 'test://c:\\test';
        $expected = 'test://c:/test/';
        $this->assertEquals($expected, $this->object->normalizePath($path));
        $path = 'test://c:\\test/dummy';
        $expected = 'test://c:/test/dummy/';
        $this->assertEquals($expected, $this->object->normalizePath($path));
    }
    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new FilePathNormalizer();
    }
    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }
    /**
     * @type FilePathNormalizer $object
     */
    protected $object;
}
